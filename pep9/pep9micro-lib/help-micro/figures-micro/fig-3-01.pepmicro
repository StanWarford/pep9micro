UnitPre: IR=0x000000, PC=0x01FF, T1=0x12, S=0
UnitPre: Mem[0x0200]=0xAABB, Mem[0x0202]=0xCCDD,Mem[0x0204]=0xEEFF


// ================
// Instruction Specifier Fetch
// ================

// Decide if the program counter is even, and select instruction specifier fetch logic.
start: if PCisOdd is_fetch_o else is_fetch_e

// ----------------
// Even Instruction Specifier fetch w/ prefetch
// ----------------

is_fetch_e: A=6, B=7, MARMux=1; MARCk
// Initiate fetch, PC ? PC plus 1.
MemRead, A=7, B=23, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
MemRead, A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk
MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
// IR ? MDREven, T1 ? MDROdd, PrefetchValid ? true
EOMux=0, AMux=0, ALU=0, CMux=1, C=8; LoadCk
EOMux=1, AMux=0, ALU=0, CMux=1, C=11, PValid=1; LoadCk, PValidCk; goto end_is_fetch

// ----------------
// Odd Instruction Specifier fetch
// ----------------

// Determine if prefetch in T1 is valid.
is_fetch_o: if hasPrefetch is_fetch_o_v else is_fetch_o_i 

// Path taken when prefetch is valid. IR ? T1
is_fetch_o_v: A=11, AMux=1, ALU=0, CMux=1, C=8; LoadCk
// PC ? PC plus 1
A=7, B=23, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk; goto end_is_fetch

// Path taken when prefetch is not valid. IR ? Mem[PC]<8..15>
// Initiate fetch, PC ? PC plus 1.
is_fetch_o_i: A=6, B=7, MARMux=1; MARCk
MemRead, A=7, B=23, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
MemRead, A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk
MemRead, MDROMux=0; MDROCk
// T1 ? MDROdd.
EOMux=1, AMux=0, ALU=0, CMux=1, C=8; LoadCk; goto end_is_fetch

// If the instruction is 0x00, then stop, otherwise fetch the next instruction.
end_is_fetch: A=8, AMux=1, ALU=0, ANDZ=0; ZCk; if EQ end else start

end: stopCPU
