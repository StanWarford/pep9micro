UnitPre: IR=0x112233 //alternate between 32 and 33 to work with even / odd fetching
UnitPre: X=0x0004, SP=0x1000
//Direct
UnitPre: Mem[0x2232]=0x5566, Mem[0x2234]=0x7788 //Even should give 5566, odd should give 6677
//indeXed
UnitPre: Mem[0x2236]=0x99AA, Mem[0x2238]=0xBBCC //Even should be 99aa, odd aabb
//Stack-relative
UnitPre: Mem[0x3232]=0xCAFE, Mem[0x3234]=0xEDBE //Even should be cafe, odd feed


// ================
// Operand Specifier Decoder
// ================

// Each addressing mode is responsible for the following:
// 1. T6 ? Value of Operand Specifier after address lookup is performed.
// 2. T5 ? Address in memory from where Operand Specified was loaded. Not set in immediate addressing.
// 3. Using the ISD branch function to continue microprogram execution.

// Here is an example. Consider the instruction "LDWA 6,d" and suppose Mem[0x0006] = 0xCAFE.
// At the end of the "dAddr" unit, T6 ? 0xCAFE & T5 ? 0x0006.

// Another example. Consider the instruction "LDWA 7,n" and suppose:
// Mem[0x0007]=0xFE, Mem[0x0008]=0x01, Mem[0xFE01]=0xBE,Mem[0xFE02]=EF.
// At the of the "nAddr" unit, T6 ? 0xBEEF & T5 ? 0xFE01.


// ----------------
// Direct Addressing Mode & Derivatives (D & S, X, SX)
// ----------------

// Direct Addressing Mode.
// T6 ? Mem[OperSpec], T5 ? OperSpec
dAddr: A=10, AMux=1, ALU=0, CMux=1, C=19; LoadCk
A=9, AMux=1, ALU=0, CMux=1, C=18; LoadCk
// MAR ? OperSpec, initiate fetch.
A=9, B=10, MARMux=1; MARCk
// Select fetch logic depending on if OperSpec is odd.
MemRead, A=10, AMux=1, ALU=13; SCk; if SBit d_odd else d_even 

// An odd addressed word will span two words in memory. So, two lookups must be performed.
// Compute the address of the second word, and place it in T4.
d_odd: MemRead, A=10, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
// Clock in odd byte, which is high order byte of operand value.
MemRead, A=9, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk; goto d_odd_shared

// Shared between all "direct derivative" addressing modes.
// Assumes T4 is address of next byte to fetch, and MDRO contains T6<hi>.
d_odd_shared: A=16, B=17, MARMux=1; MARCk
// T6<hi> ? MDRO
MemRead, EOMux=1, AMux=0, ALU=0, CMux=1, C=20; LoadCk
MemRead
MemRead, MDREMux=0; MDRECk
// T6<lo> ? MDRE
EOMux=0, AMux=0, ALU=0, CMux=1, C=21; LoadCk; goto end 

// Shared between all "direct derivative" addressing modes.
// Assumes the correct address is loaded in MAR, and that one read cycle has been performed.
// Loads an entire aligned word from mem into T6.
d_even: MemRead
MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
// T6<hi> ? MDRE, T6<lo> ? MDRO
EOMux=0, AMux=0, ALU=0, CMux=1, C=20; LoadCk
EOMux=1, AMux=0, ALU=0, CMux=1, C=21; LoadCk; goto end 



// Stack Relative Addressing Mode. T6 ? Mem[OperSpec plus SP], T5 ? OperSpec plus SP.
// T5 ? OperSpec plus SP
sAddr: A=10, B=5, AMux=1, ALU=1, CMux=1, C=19; SCk, LoadCk
A=9, B=4, AMux=1, CSMux=1, ALU=2, CMux=1, C=18; LoadCk; goto sx_shared

// indexed Addressing Mode. T6 ? Mem[OperSpec plus X], T5 ? OperSpec plus X.
// T5 ? OperSpec plus X
xAddr: A=10, B=3, AMux=1, ALU=1, CMux=1, C=19; SCk, LoadCk
A=9, B=2, AMux=1, CSMux=1, ALU=2, CMux=1, C=18; LoadCk; goto sx_shared

// Stack Indexed Addressing Mode. T6 ? Mem[OperSpec plus SP plus X], T5 ? OperSpec plus SP plus X.
// T5 ? OperSpec plus X plus SP
sxAddr: A=10, B=5, AMux=1, ALU=1, CMux=1, C=19; SCk, LoadCk
A=9, B=4, AMux=1, CSMux=1, ALU=2, CMux=1, C=18; LoadCk
A=19, B=3, AMux=1, ALU=1, CMux=1, C=19; SCk, LoadCk
A=18, B=2, AMux=1, CSMux=1, ALU=2, CMux=1, C=18; LoadCk; goto sx_shared

// S, X, SX addressing modes all behave like direct once the addition is performed.
// Determine if the memory address being fetched is even. If so goto d_even.
// MAR ? T5
sx_shared: A=18, B=19, MARMux=1; MARCk
MemRead, A=19, AMux=1, ALU=13; SCk; if SBit sx_odd else d_even 
// Else T4 ? T5 plus 1, MDRO ? Mem[T5]<lo> , goto d_odd_shared
sx_odd: MemRead, A=19, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
MemRead, A=18, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk; goto d_odd_shared

end: stopCPU 
